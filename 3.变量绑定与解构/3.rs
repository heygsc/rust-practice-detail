//题目
// 修复下面代码的错误并使用尽可能少的改变
fn main() {
    let x: i32 = 10;
    {
        let y: i32 = 5;
        println!("x 的值是 {}, y 的值是 {}", x, y);
    }
    println!("x 的值是 {}, y 的值是 {}", x, y); 
}

//答案
fn main() {
    let x: i32 = 10;
    let y: i32 = 100;//初始化
    {
        let y: i32 = 5;//变量遮蔽
        println!("x 的值是 {}, y 的值是 {}", x, y);
    }
    println!("x 的值是 {}, y 的值是 {}", x, y); 
}
//x 的值是 10, y 的值是 5
//x 的值是 10, y 的值是 100

//讲解
//在题目中，x 定义在了外层作用域，y 定义在了内层的作用域。
//内层的 println 没有问题。
//但是，外层的 println ，是拿不到内层的 y 的。
//可以在外层初始化 y，内层此时会变量遮蔽，这样外层和内层的 println 都可以使用 x 和 y 。
//注意，此时外层的 println ，y 还是原来的值。
