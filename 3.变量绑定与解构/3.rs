// 修复下面代码的错误并使用尽可能少的改变
fn main() {
    let x: i32 = 10;
    {
        let y: i32 = 5;
        println!("x 的值是 {}, y 的值是 {}", x, y);
    }
    println!("x 的值是 {}, y 的值是 {}", x, y); 
}

//讲解&答案
//在题目中，x定义在了外层作用域，y定义在了内层的作用域。
//内层的println没有问题。
//但是，外层的println，是拿不到内层的y的。
//可以在外层初始化y，内层此时会变量遮蔽，这样外层和内层的println都可以使用x和y。
//注意，此时外层的println，y还是原来的值。
fn main() {
    let x: i32 = 10;
    let y: i32 = 100;//初始化
    {
        let y: i32 = 5;//变量遮蔽
        println!("x 的值是 {}, y 的值是 {}", x, y);
    }
    println!("x 的值是 {}, y 的值是 {}", x, y); 
}
//x 的值是 10, y 的值是 5
//x 的值是 10, y 的值是 100
